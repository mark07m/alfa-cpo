// –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
const axios = require('axios');

const API_URL = 'http://localhost:3001/api';

async function testApiConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
  
  try {
    // –¢–µ—Å—Ç 1: Health check
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...');
    const healthResponse = await axios.get(`${API_URL}/health`);
    console.log('‚úÖ Health:', healthResponse.data);
    
    // –¢–µ—Å—Ç 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    console.log('2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    const loginResponse = await axios.post(`${API_URL}/auth/login`, {
      email: 'aaadmin@sro-au.ru',
      password: 'Admin123!'
    });
    console.log('‚úÖ Login:', loginResponse.data.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
    
    const token = loginResponse.data.data.token;
    console.log('Token:', token ? token.substring(0, 20) + '...' : '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞');
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö
    console.log('3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö...');
    const arbitratorsResponse = await axios.get(`${API_URL}/registry`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });
    console.log('‚úÖ Arbitrators:', arbitratorsResponse.data.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', arbitratorsResponse.data.data?.length || 0);
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
    console.log('4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ...');
    const timestamp = Date.now();
    const newManager = {
      fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –£–ø—Ä–∞–≤–ª—è—é—â–∏–π',
      inn: `${timestamp.toString().slice(-12)}`,
      registryNumber: `TEST-${timestamp}`,
      phone: '79991234567',
      email: `test-${timestamp}@arbitrator.ru`,
      region: '–ú–æ—Å–∫–≤–∞',
      city: '–ú–æ—Å–∫–≤–∞',
      status: 'active',
      joinDate: new Date().toISOString(),
      birthDate: '1980-01-01T00:00:00.000Z',
      birthPlace: '–≥. –ú–æ—Å–∫–≤–∞',
      registrationDate: new Date().toISOString(),
      decisionNumber: '–†–ï–®-TEST-001',
      education: '–í—ã—Å—à–µ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      workExperience: '5 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
      internship: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º —Å—É–¥–µ',
      examCertificate: '–°–ï–†–¢-TEST-001',
      postalAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 10'
    };
    
    const createResponse = await axios.post(`${API_URL}/registry`, newManager, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      }
    });
    console.log('‚úÖ Create:', createResponse.data.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Headers:', error.response.headers);
    }
  }
}

testApiConnection();