#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –Ω–æ–≤–æ—Å—Ç–µ–π
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
 */

const API_BASE_URL = 'http://localhost:3001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testNewsData = {
  title: '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å',
  content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
  excerpt: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏',
  publishedAt: new Date().toISOString(),
  status: 'draft',
  seoTitle: 'SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏',
  seoDescription: 'SEO –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏',
  seoKeywords: ['—Ç–µ—Å—Ç', '–Ω–æ–≤–æ—Å—Ç–∏', 'API']
};

const testCategoryData = {
  name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
  slug: `test-category-${Date.now()}`,
  color: '#FF5722',
  icon: 'test-icon',
  order: 1
};

let authToken = '';
let createdNewsId = '';
let createdCategoryId = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...(authToken && { 'Authorization': `Bearer ${authToken}` }),
      ...options.headers
    },
    ...options
  });

  const data = await response.json();
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${data.message || 'Unknown error'}`);
  }
  
  return data;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logResult(testName, success, message, data = null) {
  const status = success ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${testName}: ${message}`);
  if (data && process.env.DEBUG) {
    console.log('   –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2));
  }
}

// –¢–µ—Å—Ç 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async function testAuthentication() {
  try {
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const timestamp = Date.now();
    const testEmail = `testuser${timestamp}@example.com`;
    
    try {
      await makeRequest(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        body: JSON.stringify({
          email: testEmail,
          password: 'test123',
          firstName: 'Test',
          lastName: 'User'
        })
      });
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
    
    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
    const response = await makeRequest(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      body: JSON.stringify({
        email: testEmail,
        password: 'test123'
      })
    });
    
    if (response.success && response.data.token) {
      authToken = response.data.token;
      logResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', true, '–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω');
      return true;
    } else {
      logResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', false, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
      return false;
    }
  } catch (error) {
    logResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async function testGetNews() {
  try {
    console.log('\nüì∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    const response = await makeRequest(`${API_BASE_URL}/news`);
    
    if (response.success && Array.isArray(response.data)) {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π', true, `–ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);
      return true;
    } else {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π', false, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      return false;
    }
  } catch (error) {
    logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π
async function testGetNewsCategories() {
  try {
    console.log('\nüìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    const response = await makeRequest(`${API_BASE_URL}/news/categories`);
    
    if (response.success && Array.isArray(response.data)) {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', true, `–ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      return true;
    } else {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', false, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      return false;
    }
  } catch (error) {
    logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async function testCreateNewsCategory() {
  try {
    console.log('\n‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    const response = await makeRequest(`${API_BASE_URL}/news/categories`, {
      method: 'POST',
      body: JSON.stringify(testCategoryData)
    });
    
    if (response.success && response.data) {
      createdCategoryId = response.data._id || response.data.id;
      logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', true, `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${createdCategoryId}`);
      return true;
    } else {
      logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return false;
    }
  } catch (error) {
    logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
async function testCreateNews() {
  try {
    console.log('\n‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏...');
    
    const newsData = {
      ...testNewsData,
      ...(createdCategoryId && { category: createdCategoryId })
    };
    
    const response = await makeRequest(`${API_BASE_URL}/news`, {
      method: 'POST',
      body: JSON.stringify(newsData)
    });
    
    if (response.success && response.data) {
      createdNewsId = response.data._id || response.data.id;
      logResult('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', true, `–ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${createdNewsId}`);
      return true;
    } else {
      logResult('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å');
      return false;
    }
  } catch (error) {
    logResult('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
async function testGetNewsItem() {
  try {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏...');
    
    if (!createdNewsId) {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏');
      return false;
    }
    
    const response = await makeRequest(`${API_BASE_URL}/news/${createdNewsId}`);
    
    if (response.success && response.data) {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', true, '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
      return true;
    } else {
      logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å');
      return false;
    }
  } catch (error) {
    logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
async function testUpdateNews() {
  try {
    console.log('\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏...');
    
    if (!createdNewsId) {
      logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏');
      return false;
    }
    
    const updateData = {
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å',
      content: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏',
      status: 'published'
    };
    
    const response = await makeRequest(`${API_BASE_URL}/news/${createdNewsId}`, {
      method: 'PATCH',
      body: JSON.stringify(updateData)
    });
    
    if (response.success && response.data) {
      logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', true, '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      return true;
    } else {
      logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å');
      return false;
    }
  } catch (error) {
    logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏
async function testUpdateNewsStatus() {
  try {
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏...');
    
    if (!createdNewsId) {
      logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', false, '–ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏');
      return false;
    }
    
    const response = await makeRequest(`${API_BASE_URL}/news/${createdNewsId}/status`, {
      method: 'PATCH',
      body: JSON.stringify({ status: 'archived' })
    });
    
    if (response.success && response.data) {
      logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', true, '–°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return true;
    } else {
      logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', false, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
      return false;
    }
  } catch (error) {
    logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 9: –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
async function testSearchNews() {
  try {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    const response = await makeRequest(`${API_BASE_URL}/news/search?q=—Ç–µ—Å—Ç`);
    
    if (response.success && Array.isArray(response.data)) {
      logResult('–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π', true, `–ù–∞–π–¥–µ–Ω–æ ${response.data.length} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "—Ç–µ—Å—Ç"`);
      return true;
    } else {
      logResult('–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π', false, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–∏—Å–∫–∞');
      return false;
    }
  } catch (error) {
    logResult('–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
async function testGetPublicNews() {
  try {
    console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    const response = await makeRequest(`${API_BASE_URL}/news/public`);
    
    if (response.success && Array.isArray(response.data)) {
      logResult('–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', true, `–ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π`);
      return true;
    } else {
      logResult('–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
      return false;
    }
  } catch (error) {
    logResult('–ü—É–±–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 11: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
async function testDeleteNews() {
  try {
    console.log('\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏...');
    
    if (!createdNewsId) {
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏');
      return false;
    }
    
    const response = await makeRequest(`${API_BASE_URL}/news/${createdNewsId}`, {
      method: 'DELETE'
    });
    
    if (response.success !== false) { // DELETE –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 204 –±–µ–∑ —Ç–µ–ª–∞
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', true, '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      return true;
    } else {
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å');
      return false;
    }
  } catch (error) {
    if (error.message.includes('403') || error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')) {
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', true, '–ü—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å ADMIN/MODERATOR)');
      return true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }
    logResult('–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', false, error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 12: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function testDeleteNewsCategory() {
  try {
    console.log('\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...');
    
    if (!createdCategoryId) {
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false, '–ù–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      return false;
    }
    
    const response = await makeRequest(`${API_BASE_URL}/news/categories/${createdCategoryId}`, {
      method: 'DELETE'
    });
    
    if (response.success !== false) { // DELETE –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 204 –±–µ–∑ —Ç–µ–ª–∞
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', true, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      return true;
    } else {
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return false;
    }
  } catch (error) {
    if (error.message.includes('403') || error.message.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')) {
      logResult('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', true, '–ü—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å ADMIN/MODERATOR)');
      return true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }
    logResult('–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –Ω–æ–≤–æ—Å—Ç–µ–π...\n');
  
  const tests = [
    testAuthentication,
    testGetNews,
    testGetNewsCategories,
    testCreateNewsCategory,
    testCreateNews,
    testGetNewsItem,
    testUpdateNews,
    testUpdateNewsStatus,
    testSearchNews,
    testGetPublicNews,
    testDeleteNews,
    testDeleteNewsCategory
  ];
  
  let passedTests = 0;
  let totalTests = tests.length;
  
  for (const test of tests) {
    try {
      const result = await test();
      if (result) passedTests++;
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`);
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests}`);
  
  if (passedTests === totalTests) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = {
  runTests,
  testAuthentication,
  testGetNews,
  testCreateNews,
  testUpdateNews,
  testDeleteNews
};
