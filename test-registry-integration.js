#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Ä–µ–µ—Å—Ç—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */

const API_BASE_URL = 'http://localhost:3001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testArbitrator = {
  fullName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
  inn: '123456789012',
  registryNumber: 'TEST-001',
  phone: '+7 (999) 123-45-67',
  email: 'test@example.com',
  region: '–ú–æ—Å–∫–≤–∞',
  city: '–ú–æ—Å–∫–≤–∞',
  status: 'active',
  joinDate: '2024-01-01',
  birthDate: '1980-01-01',
  birthPlace: '–ú–æ—Å–∫–≤–∞',
  education: '–í—ã—Å—à–µ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ',
  workExperience: '10 –ª–µ—Ç',
  insurance: {
    startDate: '2024-01-01',
    endDate: '2024-12-31',
    amount: 1000000,
    contractNumber: 'INS-001',
    contractDate: '2024-01-01',
    insuranceCompany: '–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
  }
};

let createdArbitratorId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(method, endpoint, data = null, headers = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
      ...headers
    }
  };

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(url, options);
    const responseData = await response.json();
    
    console.log(`${method} ${endpoint}:`, response.status, responseData);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${responseData.message || 'Unknown error'}`);
    }
    
    return responseData;
  } catch (error) {
    console.error(`Error ${method} ${endpoint}:`, error.message);
    throw error;
  }
}

// –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö
async function testGetArbitrators() {
  console.log('\n=== –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö ===');
  
  try {
    const response = await makeRequest('GET', '/registry');
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${response.data?.length || 0}`);
    console.log(`üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è:`, response.pagination);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testCreateArbitrator() {
  console.log('\n=== –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ ===');
  
  try {
    const response = await makeRequest('POST', '/registry', testArbitrator);
    console.log('‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üÜî ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:', response.data?._id || response.data?.id);
    createdArbitratorId = response.data?._id || response.data?.id;
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–æ ID
async function testGetArbitratorById() {
  if (!createdArbitratorId) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –Ω–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏');
    return false;
  }

  console.log('\n=== –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–æ ID ===');
  
  try {
    const response = await makeRequest('GET', `/registry/${createdArbitratorId}`);
    console.log('‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üë§ –î–∞–Ω–Ω—ã–µ:', {
      fullName: response.data?.fullName,
      inn: response.data?.inn,
      registryNumber: response.data?.registryNumber
    });
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ ID:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testUpdateArbitrator() {
  if (!createdArbitratorId) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –Ω–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏');
    return false;
  }

  console.log('\n=== –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ ===');
  
  const updateData = {
    fullName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)',
    city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    workExperience: '15 –ª–µ—Ç'
  };

  try {
    const response = await makeRequest('PATCH', `/registry/${createdArbitratorId}`, updateData);
    console.log('‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      fullName: response.data?.fullName,
      city: response.data?.city,
      workExperience: response.data?.workExperience
    });
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù
async function testFindByInn() {
  console.log('\n=== –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù ===');
  
  try {
    const response = await makeRequest('GET', `/registry/inn/${testArbitrator.inn}`);
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π:', {
      fullName: response.data?.fullName,
      inn: response.data?.inn
    });
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞
async function testFindByRegistryNumber() {
  console.log('\n=== –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞ ===');
  
  try {
    const response = await makeRequest('GET', `/registry/number/${testArbitrator.registryNumber}`);
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π:', {
      fullName: response.data?.fullName,
      registryNumber: response.data?.registryNumber
    });
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function testGetStatistics() {
  console.log('\n=== –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ ===');
  
  try {
    const response = await makeRequest('GET', '/registry/statistics');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      total: response.data?.total,
      active: response.data?.active,
      excluded: response.data?.excluded,
      suspended: response.data?.suspended
    });
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 8: –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
async function testExportExcel() {
  console.log('\n=== –¢–µ—Å—Ç 8: –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ===');
  
  try {
    const response = await fetch(`${API_BASE_URL}/registry/export/excel`);
    if (response.ok) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', response.headers.get('content-length'), '–±–∞–π—Ç');
      return true;
    } else {
      throw new Error(`HTTP ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 9: –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
async function testExportCsv() {
  console.log('\n=== –¢–µ—Å—Ç 9: –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV ===');
  
  try {
    const response = await fetch(`${API_BASE_URL}/registry/export/csv`);
    if (response.ok) {
      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', response.headers.get('content-length'), '–±–∞–π—Ç');
      return true;
    } else {
      throw new Error(`HTTP ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 10: –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testDeleteArbitrator() {
  if (!createdArbitratorId) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –Ω–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏');
    return false;
  }

  console.log('\n=== –¢–µ—Å—Ç 10: –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ ===');
  
  try {
    await makeRequest('DELETE', `/registry/${createdArbitratorId}`);
    console.log('‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
async function testFiltering() {
  console.log('\n=== –¢–µ—Å—Ç 11: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ ===');
  
  const filters = [
    { name: '–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏', params: '?search=–ò–≤–∞–Ω–æ–≤' },
    { name: '–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É', params: '?status=active' },
    { name: '–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É', params: '?region=–ú–æ—Å–∫–≤–∞' },
    { name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏', params: '?sortBy=fullName&sortOrder=asc' },
    { name: '–ü–∞–≥–∏–Ω–∞—Ü–∏—è', params: '?page=1&limit=5' }
  ];

  let successCount = 0;

  for (const filter of filters) {
    try {
      const response = await makeRequest('GET', `/registry${filter.params}`);
      console.log(`‚úÖ ${filter.name}: –Ω–∞–π–¥–µ–Ω–æ ${response.data?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      successCount++;
    } catch (error) {
      console.error(`‚ùå ${filter.name}:`, error.message);
    }
  }

  return successCount === filters.length;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Ä–µ–µ—Å—Ç—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö');
  console.log(`üåê API Base URL: ${API_BASE_URL}`);
  console.log('=' * 80);

  const tests = [
    { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞', fn: testGetArbitrators },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏', fn: testCreateArbitrator },
    { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID', fn: testGetArbitratorById },
    { name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏', fn: testUpdateArbitrator },
    { name: '–ü–æ–∏—Å–∫ –ø–æ –ò–ù–ù', fn: testFindByInn },
    { name: '–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞', fn: testFindByRegistryNumber },
    { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', fn: testGetStatistics },
    { name: '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel', fn: testExportExcel },
    { name: '–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV', fn: testExportCsv },
    { name: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫', fn: testFiltering },
    { name: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏', fn: testDeleteArbitrator }
  ];

  const results = [];
  let passedTests = 0;

  for (const test of tests) {
    try {
      const result = await test.fn();
      results.push({ name: test.name, passed: result });
      if (result) passedTests++;
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${test.name}":`, error.message);
      results.push({ name: test.name, passed: false });
    }
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '=' * 80);
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
  console.log('=' * 80);
  
  results.forEach(result => {
    const status = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.name}`);
  });

  console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${tests.length}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${tests.length - passedTests}/${tests.length}`);
  console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passedTests / tests.length) * 100)}%`);

  if (passedTests === tests.length) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ä–µ–µ—Å—Ç—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.');
  }

  return passedTests === tests.length;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { runTests };
