const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

async function debugTokenRefresh() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–∞–≤...\n');

    // –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    console.log('üîê –®–∞–≥ 1: –õ–æ–≥–∏–Ω...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@sro-au.ru',
      password: 'Admin123!'
    });

    const token = loginResponse.data.data.token;
    const refreshToken = loginResponse.data.data.refreshToken;
    const user = loginResponse.data.data.user;
    
    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}`);
    console.log(`   üé≠ –†–æ–ª—å: ${user.role}`);
    console.log(`   üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${JSON.stringify(user.permissions || [])}`);

    // –®–∞–≥ 2: –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    console.log('\nüîÑ –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
    try {
      const refreshResponse = await axios.post(`${API_BASE}/auth/refresh`, {
        refreshToken: refreshToken
      });

      const newToken = refreshResponse.data.data.token;
      const newRefreshToken = refreshResponse.data.data.refreshToken;
      
      console.log('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
      console.log(`   –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${newToken.substring(0, 20)}...`);
      console.log(`   –ù–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω: ${newRefreshToken.substring(0, 20)}...`);

      // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      console.log('\nüîí –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
      const profileResponse = await axios.get(`${API_BASE}/auth/profile`, {
        headers: { Authorization: `Bearer ${newToken}` }
      });

      const profile = profileResponse.data.data;
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω');
      console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${profile.name}`);
      console.log(`   üé≠ –†–æ–ª—å: ${profile.role}`);
      console.log(`   üîë –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${JSON.stringify(profile.permissions || [])}`);

      // –®–∞–≥ 4: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      console.log('\n‚úèÔ∏è –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
      try {
        const updateData = {
          fullName: '–¢–µ—Å—Ç —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º',
          inn: '111111074121',
          registryNumber: '–ê–£-100-121',
          phone: '74999999999',
          email: 'test-new-token@example.com',
          status: 'active',
          joinDate: '2020-01-15'
        };

        const updateResponse = await axios.patch(`${API_BASE}/registry/68e0542a6ef94ea45379b1a8`, updateData, {
          headers: { Authorization: `Bearer ${newToken}` }
        });

        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', updateResponse.data.data.fullName);
      } catch (updateError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log('   –°—Ç–∞—Ç—É—Å:', updateError.response?.status);
        console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ:', updateError.response?.data?.message);
        console.log('   –î–µ—Ç–∞–ª–∏:', JSON.stringify(updateError.response?.data, null, 2));
      }

    } catch (refreshError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:');
      console.log('   –°—Ç–∞—Ç—É—Å:', refreshError.response?.status);
      console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ:', refreshError.response?.data?.message);
    }

    console.log('\nüéâ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.response?.data?.message || error.message);
  }
}

debugTokenRefresh();
