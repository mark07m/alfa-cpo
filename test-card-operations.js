const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

async function testCardOperations() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ...\n');

  // –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
  let testId = null;
  
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏...');
    const listResponse = await axios.get(`${API_BASE_URL}/registry?limit=1`);
    if (listResponse.data.data && listResponse.data.data.length > 0) {
      testId = listResponse.data.data[0]._id;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å: ${testId}`);
      console.log(`   üìù –§–ò–û: ${listResponse.data.data[0].fullName}`);
      console.log(`   üìä –ù–æ–º–µ—Ä –≤ —Ä–µ–µ—Å—Ç—Ä–µ: ${listResponse.data.data[0].registryNumber}`);
    } else {
      console.log('‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: ${error.message}`);
    return;
  }

  console.log('\n' + '='.repeat(60) + '\n');

  // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
  try {
    console.log('üîç –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID...');
    const getResponse = await axios.get(`${API_BASE_URL}/registry/${testId}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: ${getResponse.status} ${getResponse.statusText}`);
    console.log(`   üìù –§–ò–û: ${getResponse.data.fullName}`);
    console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${getResponse.data.status}`);
    console.log(`   üìß Email: ${getResponse.data.email}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: ${error.response?.status || error.code} - ${error.message}`);
    if (error.response?.data) {
      console.log(`   üìù –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`);
    }
  }

  console.log('\n' + '='.repeat(60) + '\n');

  // –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  try {
    console.log('‚úèÔ∏è –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...');
    const updateData = {
      fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –£–ø—Ä–∞–≤–ª—è—é—â–∏–π (–û–±–Ω–æ–≤–ª–µ–Ω–æ)',
      phone: '+74951234567',
      email: 'test-updated@example.com'
    };
    
    const updateResponse = await axios.patch(`${API_BASE_URL}/registry/${testId}`, updateData);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: ${updateResponse.status} ${updateResponse.statusText}`);
    console.log(`   üìù –ù–æ–≤–æ–µ –§–ò–û: ${updateResponse.data.fullName}`);
    console.log(`   üìû –ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${updateResponse.data.phone}`);
    console.log(`   üìß –ù–æ–≤—ã–π email: ${updateResponse.data.email}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: ${error.response?.status || error.code} - ${error.message}`);
    if (error.response?.data) {
      console.log(`   üìù –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`);
    }
  }

  console.log('\n' + '='.repeat(60) + '\n');

  // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  let newTestId = null;
  try {
    console.log('‚ûï –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è...');
    const createData = {
      fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –î–ª—è –£–¥–∞–ª–µ–Ω–∏—è',
      inn: '123456789012',
      registryNumber: '–ê–£-–¢–ï–°–¢-001',
      phone: '+74951234567',
      email: 'test-delete@example.com',
      joinDate: '2024-01-01',
      status: 'active'
    };
    
    const createResponse = await axios.post(`${API_BASE_URL}/registry`, createData);
    newTestId = createResponse.data._id;
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞: ${createResponse.status} ${createResponse.statusText}`);
    console.log(`   üÜî ID: ${newTestId}`);
    console.log(`   üìù –§–ò–û: ${createResponse.data.fullName}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: ${error.response?.status || error.code} - ${error.message}`);
    if (error.response?.data) {
      console.log(`   üìù –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`);
    }
  }

  console.log('\n' + '='.repeat(60) + '\n');

  // –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ)
  if (newTestId) {
    try {
      console.log('üóëÔ∏è –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...');
      const deleteResponse = await axios.delete(`${API_BASE_URL}/registry/${newTestId}`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: ${deleteResponse.status} ${deleteResponse.statusText}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: ${error.response?.status || error.code} - ${error.message}`);
      if (error.response?.data) {
        console.log(`   üìù –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`);
      }
    }
  } else {
    console.log('‚è≠Ô∏è –¢–µ—Å—Ç 4: –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)');
  }

  console.log('\n' + '='.repeat(60) + '\n');

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
  if (newTestId) {
    try {
      console.log('üîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏...');
      await axios.get(`${API_BASE_URL}/registry/${newTestId}`);
      console.log(`‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!`);
    } catch (error) {
      if (error.response?.status === 404) {
        console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (404 Not Found)`);
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: ${error.response?.status || error.code} - ${error.message}`);
      }
    }
  } else {
    console.log('‚è≠Ô∏è –¢–µ—Å—Ç 5: –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –±—ã–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)');
  }

  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

testCardOperations().catch(console.error);
