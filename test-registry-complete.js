const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';
let authToken = null;
let testManagerId = null;
let testManagerInn = null;
let testManagerRegistryNumber = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function getAuthToken() {
  try {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const response = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'aaadmin@sro-au.ru',
      password: 'Admin123!'
    });
    
    if (response.data.success && response.data.data.token) {
      authToken = response.data.data.token;
      console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', authToken.substring(0, 20) + '...');
      return authToken;
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.response?.data || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º
function getAuthHeaders() {
  return {
    'Authorization': `Bearer ${authToken}`,
    'Content-Type': 'application/json'
  };
}

// 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö
async function testGetArbitrators() {
  try {
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö');
    const response = await axios.get(`${BASE_URL}/registry`);
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    if (response.data.success && response.data.data) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö: ${response.data.data.length}`);
      if (response.data.data.length > 0) {
        console.log('üìù –ü–µ—Ä–≤—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π:', JSON.stringify(response.data.data[0], null, 2));
      }
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞');
    }
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:', error.response?.data || error.message);
    throw error;
  }
}

// 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testCreateArbitrator() {
  try {
    console.log('\n‚ûï –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    
    const timestamp = Date.now();
    const newManager = {
      fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –£–ø—Ä–∞–≤–ª—è—é—â–∏–π',
      inn: `${timestamp.toString().slice(-12)}`,
      registryNumber: `TEST-${timestamp}`,
      phone: '79991234567',
      email: `test-${timestamp}@arbitrator.ru`,
      region: '–ú–æ—Å–∫–≤–∞',
      city: '–ú–æ—Å–∫–≤–∞',
      status: 'active',
      joinDate: new Date().toISOString(),
      birthDate: '1980-01-01T00:00:00.000Z',
      birthPlace: '–≥. –ú–æ—Å–∫–≤–∞',
      registrationDate: new Date().toISOString(),
      decisionNumber: '–†–ï–®-TEST-001',
      education: '–í—ã—Å—à–µ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      workExperience: '5 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
      internship: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–º —Å—É–¥–µ',
      examCertificate: '–°–ï–†–¢-TEST-001',
      postalAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 10'
    };
    
    const response = await axios.post(
      `${BASE_URL}/registry`,
      newManager,
      { headers: getAuthHeaders() }
    );
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    if (response.data.success && response.data.data) {
      testManagerId = response.data.data.id || response.data.data._id;
      testManagerInn = response.data.data.inn;
      console.log('‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–∑–¥–∞–Ω —Å ID:', testManagerId);
      console.log('‚úÖ –ò–ù–ù —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ:', testManagerInn);
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º');
    }
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error.response?.data || error.message);
    throw error;
  }
}

// 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testGetArbitratorById() {
  if (!testManagerId) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    return;
  }
  
  try {
    console.log('\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–æ ID');
    const response = await axios.get(`${BASE_URL}/registry/${testManagerId}`);
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ ID:', error.response?.data || error.message);
    throw error;
  }
}

// 4. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testUpdateArbitrator() {
  if (!testManagerId) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    return;
  }
  
  try {
    console.log('\n‚úèÔ∏è –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    
    const updateData = {
      fullName: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –£–ø—Ä–∞–≤–ª—è—é—â–∏–π',
      status: 'suspended',
      phone: '79999999999',
      email: 'updated@arbitrator.ru',
      postalAddress: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è, –¥. 2, –∫–≤. 20',
      workExperience: '7 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞'
    };
    
    const response = await axios.patch(
      `${BASE_URL}/registry/${testManagerId}`,
      updateData,
      { headers: getAuthHeaders() }
    );
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.response?.data || error.message);
    throw error;
  }
}

// 5. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù
async function testFindByInn() {
  if (!testManagerInn) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç –ò–ù–ù —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    return;
  }
  
  try {
    console.log('\nüîç –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–æ –ò–ù–ù');
    const response = await axios.get(`${BASE_URL}/registry/inn/${testManagerInn}`);
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ò–ù–ù:', error.response?.data || error.message);
    throw error;
  }
}

// 6. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞
async function testFindByRegistryNumber() {
  try {
    console.log('\nüîç –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞');
    const response = await axios.get(`${BASE_URL}/registry/number/TEST-001`);
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–µ–µ—Å—Ç—Ä–∞:', error.response?.data || error.message);
    throw error;
  }
}

// 7. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function testGetStatistics() {
  try {
    console.log('\nüìä –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞');
    const response = await axios.get(`${BASE_URL}/registry/statistics`);
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.response?.data || error.message);
    throw error;
  }
}

// 8. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
async function testDeleteArbitrator() {
  if (!testManagerId) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    return;
  }
  
  try {
    console.log('\nüóëÔ∏è –¢–µ—Å—Ç 8: –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ');
    const response = await axios.delete(
      `${BASE_URL}/registry/${testManagerId}`,
      { headers: getAuthHeaders() }
    );
    
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error.response?.data || error.message);
    throw error;
  }
}

// 9. –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testWithoutAuth() {
  try {
    console.log('\nüîí –¢–µ—Å—Ç 9: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    const response = await axios.post(`${BASE_URL}/registry`, {
      fullName: '–¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞',
      inn: '0000000000'
    });
    
    console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.data);
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (401)');
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
    }
  }
}

// 10. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
async function testWithInvalidToken() {
  try {
    console.log('\nüîí –¢–µ—Å—Ç 10: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
    const response = await axios.post(
      `${BASE_URL}/registry`,
      { fullName: '–¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º' },
      { headers: { 'Authorization': 'Bearer invalid_token' } }
    );
    
    console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', response.data);
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (401)');
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö');
  console.log('=' * 60);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await getAuthToken();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await testGetArbitrators();
    await testCreateArbitrator();
    await testGetArbitratorById();
    await testUpdateArbitrator();
    await testFindByInn();
    await testFindByRegistryNumber();
    await testGetStatistics();
    await testDeleteArbitrator();
    
    // –¢–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await testWithoutAuth();
    await testWithInvalidToken();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests();
