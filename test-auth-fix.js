const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

async function testAuthFix() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...\n');

  try {
    // –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    console.log('üîê –®–∞–≥ 1: –õ–æ–≥–∏–Ω...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'aaadmin@sro-au.ru',
      password: 'Admin123!'
    });

    if (loginResponse.data.success) {
      const token = loginResponse.data.data.token;
      console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');
      console.log(`   üé´ –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
      console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${loginResponse.data.data.user.name}`);

      // –®–∞–≥ 2: –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
      console.log('\nüîí –®–∞–≥ 2: –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
      const protectedResponse = await axios.get(`${API_BASE_URL}/registry`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (protectedResponse.data.success) {
        console.log('‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${protectedResponse.data.data.length}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞');
      }

      // –®–∞–≥ 3: –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
      console.log('\n‚úèÔ∏è –®–∞–≥ 3: –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏...');
      const updateResponse = await axios.patch(`${API_BASE_URL}/registry/68e0542a6ef94ea45379b1a8`, {
        fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –£–ø—Ä–∞–≤–ª—è—é—â–∏–π (–û–±–Ω–æ–≤–ª–µ–Ω–æ)'
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (updateResponse.data.success) {
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   üìù –ù–æ–≤–æ–µ –§–ò–û: ${updateResponse.data.data.fullName}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
      }

    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', loginResponse.data.message);
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.response?.status || error.code} - ${error.message}`);
    if (error.response?.data) {
      console.log(`   üìù –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data)}`);
    }
  }

  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.');
  console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞.');
}

testAuthFix().catch(console.error);
